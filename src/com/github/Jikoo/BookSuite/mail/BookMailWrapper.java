/*******************************************************************************
 * Copyright (c) 2013 Ted Meyer
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Adam Gunn - plugin surrounding libraries
 ******************************************************************************/
package com.github.Jikoo.BookSuite.mail;

import java.util.Scanner;

import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;
import org.bukkit.inventory.meta.ItemMeta;

import com.github.Jikoo.BookSuite.BookSuite;

public class BookMailWrapper {
	/* The structure for a letter or package is as follows:
	 * 
	 * Title:
	 * 		letter (case insensitive)
	 * 			-or-
	 * 		package (case insensitive)
	 * 
	 * Author:
	 * 		Sender
	 * 
	 * Page 1:
	 * 		To
	 * Page 2: (optional, though must be blank for sending items)
	 * 		Associated Message
	 * Page 3: (optional)
	 * 		Item Names
	 * Page 4:
	 * 		Generated by us. Anything the sender puts here is erased, and we populate with data.
	 * 		Apon reading of the letter, this data is accessed by us, to check if the user has send items
	 * 		If those items fit in the inventory, add them, remove this page, and add the items, else
	 * 		show message to user telling them that the items cannot be added and they should increase their inventory free space
	 * 
	 * 
	 */
	
	
	
	private BookMeta bm;
	private BookMeta deserialized;
	
	private boolean letter = false;
	private boolean pack = false;
	
	private Inventory packageData;
	private String sender;
	private String adressee;
	
	
	
	public BookMailWrapper(BookMeta bm)
	{
		this.bm = bm;
		
		this.deserialized = bm.clone();
		this.deserialized.setPages(deserialized.getPages().subList(0, 3));
		
		this.sender = bm.getAuthor();
		
		this.letter = "letter".equalsIgnoreCase(bm.getTitle());
		this.pack = "package".equalsIgnoreCase(bm.getTitle());
		
		
		if (bm.getPageCount() >= 4)
		{
			this.packageData = this.getInventoryBySerializedIDs(bm.getPage(4));
		}
		
		
	}
	
	public String getAdressee()
	{
		if (this.adressee == null)
		{
			this.adressee = this.bm.getPage(0).toString();
		}
		return this.adressee;
	}
	
	public boolean isLetter()
	{
		return this.letter;
	}
	
	public boolean isPackage()
	{
		return this.pack;
	}
	
	public String getSender()
	{
		return this.sender;
	}
	
	public BookMeta getDeSerializedMeta()
	{
		return this.deserialized;
	}
	
	/*
	 * The structure for an Item Meta is as follows:
	 * 
	 * 
	 * MATERIAL_ID : ITEM_NAME : ENCHANTMENT_ID;ENCHANTMENT_LEVEL : ENCHANTMENT_ID;ENCHANTMENT_LEVEL etc
	 * 
	 * 
	 */
	private Inventory getInventoryBySerializedIDs(String serial){
		Server server = BookSuite.getInstance().getServer();
		Inventory mi = server.createInventory(null, 5, "Mail-Inventory");
		
		Scanner stringParser = new Scanner(serial);
		String line;
		int count = 0;
		while((line = stringParser.nextLine()) != null && ++count<5)
		{
			String[] iai = line.split(":");
			Material i = Material.getMaterial(Integer.parseInt(iai[0]));
			ItemStack item = new ItemStack(i);
			ItemMeta itemMeta = item.getItemMeta();
			itemMeta.setDisplayName(iai[1]);
			
			for(int iterator = 2; iterator < iai.length; iterator++){
				String[] enchantData = iai[iterator].split(";");
				Enchantment e = Enchantment.getById(Integer.parseInt(enchantData[0]));
				itemMeta.addEnchant(e, Integer.parseInt(enchantData[1]), true);
			}
			
			item.setItemMeta(itemMeta);
			mi.addItem(item);
		}
		
		stringParser.close();
		return mi;
	}
}
