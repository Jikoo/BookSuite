/*******************************************************************************
 * Copyright (c) 2013 Ted Meyer
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     Adam Gunn - plugin surrounding Mail
 ******************************************************************************/
package com.github.Jikoo.BookSuite.mail;

import java.io.Serializable;
import java.util.List;

import org.bukkit.Material;
import org.bukkit.inventory.Inventory;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.BookMeta;

public class BookMailWrapper implements Serializable {
	/*
	 * The structure for a letter or package is as follows:
	 * 
	 * Title: letter (case insensitive) -or- package (case insensitive)
	 * 
	 * Author: Sender
	 * 
	 * Page 1: To
	 * 
	 * Page 2: (optional, though must be blank for sending items)
	 * 		   Associated Message
	 * 
	 * Page 3: (optional) Item Names
	 * 
	 * Page 4: Generated by us. Anything the sender puts here is erased, and we
	 * populate with data. Apon reading of the letter, this data is accessed by
	 * us, to check if the user has send items If those items fit in the
	 * inventory, add them, remove this page, and add the items, else show
	 * message to user telling them that the items cannot be added and they
	 * should increase their inventory free space
	 */

	/**
	 * serialization ID for saving to file
	 */
	private static final long serialVersionUID = -6365444142867806360L;

	private boolean letter = false;
	private boolean pack = false;
	private String sender;
	private String adressee;

	// replaces storing the bookmeta for serialization
	private String title;
	private List<String> pages;
	private List<String> lore;

	/**
	 * 
	 * BookMailWrapper is generally a wrapper that allows for serialization,
	 * though later will support package sending too.
	 * 
	 * @param bm
	 *            the book meta to be stripped out for serialization purposes
	 */
	public BookMailWrapper(BookMeta bm) {
		this.title = bm.getTitle();
		this.adressee = bm.getPage(1).toString();
		this.pages = bm.getPages();
		if (bm.hasLore()) {
			this.lore = bm.getLore();
		}

		this.sender = bm.getAuthor();
		this.letter = "letter".equalsIgnoreCase(title);
		this.pack = "package".equalsIgnoreCase(title);
	}

	/**
	 * 
	 * @return the name of the player to whom this letter is addressed
	 */
	public String getAdressee() {
		return this.adressee;
	}

	/**
	 * 
	 * @return whether this is a wrapper for a letter
	 */
	public boolean isLetter() {
		return this.letter;
	}

	/**
	 * 
	 * @return whether this is a wrapper for a package
	 */
	public boolean isPackage() {
		return this.pack;
	}

	/**
	 * 
	 * @return the name of the player from whom this letter was sent
	 */
	public String getSender() {
		return this.sender;
	}

	/**
	 * 
	 * @return a BookMeta that is identical to the original
	 */
	public BookMeta getAllMeta() {
		ItemStack i = new ItemStack(Material.WRITTEN_BOOK);
		BookMeta bm = (BookMeta) i.getItemMeta();
		bm.setAuthor(sender);
		if (lore != null) {
			bm.setLore(lore);
		}
		bm.setPages(pages);
		bm.setTitle(title);
		return bm;
	}

	/*
	 * The structure for an Item Meta is as follows:
	 * 
	 * 
	 * MATERIAL_ID : ITEM_NAME : ENCHANTMENT_ID;ENCHANTMENT_LEVEL :
	 * ENCHANTMENT_ID;ENCHANTMENT_LEVEL etc
	 */
	@SuppressWarnings("unused")
	private Inventory getInventoryBySerializedIDs(String serial) {
		return null;
	}
}
